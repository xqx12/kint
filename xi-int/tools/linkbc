#!/usr/bin/python

import sys
import os
import subprocess, threading
import multiprocessing

chunksz = 100
output_bc = 'linked.bc'

def worker(p):
	if len(p) == 2:
		return p[1]

	ret = subprocess.call(['llvm-ld', '-r', '-v',
		'-disable-internalize', '-disable-opt', '-b'] + p,
		stdout = sys.stdout, stderr = sys.stderr)
	if ret == 0:
		return p[0]
	return False

if __name__ == '__main__':
	pool = multiprocessing.Pool(multiprocessing.cpu_count())
	bcs = sys.argv[1:]
	if len(bcs) == 0:
		bcs = sys.stdin.readlines()
		bcs = [x.strip() for x in bcs]
	
	level = 0
	while len(bcs) > 1:
		level = level + 1
		pairs = [['~linkbc-%d-%d.bc' % (level, i/chunksz)] + \
					bcs[i:i+chunksz] for i in xrange(0, len(bcs), chunksz)]
		bcs = pool.map(worker, pairs)
		bcs = filter(None, bcs)


	if len(bcs) == 1 and bcs[0]:
		if (os.path.exists(bcs[0])):
			os.rename(bcs[0], output_bc)
		subprocess.call("rm -f ~linkbc-*.bc", shell=True)
		print 'linkbc.py: result saved to', output_bc
	else:
		print 'linkbc.py: link failed!'
