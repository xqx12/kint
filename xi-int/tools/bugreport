#!/usr/bin/env python

import json
import optparse
import os, os.path
import sys
import re

parser = optparse.OptionParser()
parser.add_option("-t", "--type", default="plain",
	help="report type: plain|js [default: %default]")
(options, args) = parser.parse_args()

items = []
# start directory
if args:
	dir = args[0]
else:
	dir = "."
# walk subdirectories to collect int.*.json
for root, dirs, files in os.walk(dir):
	for name in files:
		if name.endswith(".json"):
			path = os.path.join(root, name)
			sys.stderr.write("Reading " + path + "...\n")
			items.extend(json.load(open(path))["items"])
# sort
if not items:
	sys.exit(0)
items.sort(key = lambda item: (item["file"], int(item["line"]), item["trap"]))
# post-processing
for k, item in enumerate(items):
	item["label"] = k + 1
	item["type"] = "Bug"
	item["trap"] = item["trap"].split(".")[0].rstrip("0123456789")
	m = re.search('linux-3\.[^/]*/(.*)', item["file"]);
	if m:
		item["file"] = m.group(1);
# output
if options.type == "js":
	data = {"items": items, "types": {"Bug": {"pluralLabel": "Bugs"}}}
	json.dump(data, sys.stdout, indent=2)
else:
	output = set()
	for item in items:
		if item["status"] == "sat":
			s = "%(file)s:%(line)s\t%(trap)s\n" % item
			if s not in output:
				sys.stdout.write(s)
				output.add(s)
